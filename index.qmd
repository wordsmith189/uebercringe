---
title: "Co-constructing CRINGE"
subtitle: |
  Ambivalent Affect Elicitation and Vernacular Styles</br>in 
  Dialectological Fieldwork
author:
  - name: "Lars Hinrichs"
    affiliation: "The University of Texas at Austin"
    orcid: "0000-0003-3679-1927"
date: 2025-07-08
date-format: "MMMM YYYY"
format: 
  revealjs:
   theme: white
   center: true
   chalkboard: true
   chalk-width: 16
   slide-numbers: c/t
   show-slide-number: all
   logo: "img/texas word bw.png"
   transition: fade
   css: styles.css
   footer: "Lars Hinrichs | UEBER CRINGE | Heidelberg 2025"
   title-slide-attributes:
     data-background-image: img/cowboys.png
     data-background-size: cover
execute:
  echo: false
---


```{r setup-packages}
library(pacman)
p_load(rio, tidyverse, janitor, scales, forcats, viridis, RColorBrewer, gt)
```

```{r load-data, include=FALSE}
df <- import("data_merged.xlsx")

getwd()
```

## {.smaller}
### CRINGE as a phatic device

:::{.incremental}
- The humor inherent in CT makes speakers volunteer these topics precisely for phaticity's sake (Jefferson 1984).
- Speakers seek the relief of sharing cringey experiences in conversation online and f2f (RimÃ© 2009).
- Embrace of awkwardness can engender authenticity (Haen 2018, Lotfy 2024).
:::


## Home to Texas (H2TX)

::: {.notes}

- recent dialectological project
- unusual opportunity of collecting interviews in over 70 different communities and municipalities across Texas through student fieldworkers
- without me present
- forced to consider Obs. Par.
- include questions targeting CRINGE as a way to achieve this

:::

## {background-iframe="https://www.youtube.com/embed/1GkKVKZJmiw?si=qED101A2aB1T0APj" background-interactive="true"}


## 

**Clip 1: DelRio_DC_07022024**

:::{style="width: 90%; margin: auto;"}

```{r}
p_load(gt)

df_clip_1 <-  import('/Users/LH9896/Library/CloudStorage/Box-Box/_TELL/Projects/TELL & H2TX/UEBER CRINGE 2025/CRINGE_analysis/av/DelRio_DC_07022024_1.xlsx') |> 
  filter(!is.na(Speaker)) 

df_clip_1 |> 
  gt() |> 
  tab_style(
    style = cell_text(v_align = "top",
                      size = px(20) ),
    locations = cells_body(columns = everything())
  ) |> 
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_column_labels()
  ) 

```

:::

<audio controls>
  <source src="av/DelRio_DC_07022024_1.mp3" type="audio/mpeg">
  Your browser does not support the audio element.
</audio>

## {.smaller}
### Some concepts

:::{.fragment}
sociolinguistic interview 
  : Key data elicitation method in dialectology and sociolinguistics
:::

:::{.fragment}
observer's paradox 
  : The challenge of studying natural speech patterns when the very act of observing alters the way people speak (Labov 1972 a, b).
:::

:::{.fragment}
danger-of-death (DoD) question 
  : An interviewing tool used to elicit natural, casual speech from participants (Labov 1972 a, b).
:::

## {.smaller}
### Critiques of the DoD question and observer's paradox

:::{.incremental}
- Doubts about effectiveness (Milroy 1987, Butters 2000)
- Ethical problems with trauma narrative elicitation (Finlay 2005, Mendoza-Denton 2008, Schilling 2013)<br>&nbsp;
- "False dilemma?" - Slx interview as interactional event in its own right... all narrative is performative (Johnstone 2006, Schilling 2008, De Fina & Perrino 2011).
- Effects of observer's paradox can be mitigated (Cukor-Avila 2000)
- Sneller & Barnhardt (2023): pop-cultural context for chatty questions
:::

:::{.fragment}
:::{.callout-tip appearance="simple"}
In designing slx interview questions for the 21st century, we should move away from a concern with observer's paradox and toward **phaticity**.
:::
:::

## {.smaller}
### Some concepts

sociolinguistic interview 
  : Key data elicitation method in dialectology and sociolinguistics

observer's paradox 
  : The challenge of studying natural speech patterns when the very act of observing alters the way people speak (Labov 1972 a, b).

danger-of-death (DoD) question 
  : An interviewing tool used to elicit natural, casual speech from participants (Labov 1972 a, b).


:::{.fragment}
phatic communion
  : Create "ties of union" through the "exchange of words" (Malinowski 1923)
:::


## Research questions

::::{.columns}
:::{.column width="65%"}
1. Can a question aimed at eliciting CT effectively achieve what the DoD question was designed to do in slx interviews? 
1. If not, why? 
:::
:::{.column}
:::
::::

# Data and Methods {.light-text background-image="img/Burnet.png" style="color: white;"}


## 
### Collecting sociolinguistic interviews with Home To Texas (H2TX)

<br> 

Decentralized community-embedded fieldwork
: Wide geographic spread; superior community access.

## H2TX 2024 interviews

:::{.fragment}
<br>Age constraints
<br>
:::

::::{.columns}
:::{.column}
:::{.fragment}
Rurality

```{r}
df |> 
  ggplot(aes(rucc)) +
  geom_density() +
  labs(y=NULL, x="RUCC") +
  theme_classic(base_size = 25, base_family = "Georgia")

```
:::
:::

:::{.column}
:::{.fragment}

Racioethnic composition

```{r}
df |> 
  count(race, sort = T) |> 
  rename(`Racioethnic ID` = race) |> 
  gt() |> 
    tab_style(
    style = cell_text(v_align = "top",
                      size = px(22) ),
    locations = cells_body(columns = everything())
  ) |> 
  tab_style(
    style = cell_text(weight = "bold",
                      size = px(22)),
    locations = cells_column_labels()
  ) 
```
:::
:::
::::



## {.smaller}
### Interview protocol 

<br>

**A** - The community: strengths, weaknesses, and change <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(open-ended)

**B** - Multilingualism: personal background and attitudes <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(survey questions and Likert scale responses)

**C** - Open-ended conversation questions

**D** - Reading passage

<br>

:::{.fragment}
> **Key question: no. 15**
<br>Did you ever tell a story about another person, thinking the other person was not near you, but then turned around and saw that person was standing right next to you? &nbsp;&nbsp;[a.	Could you tell me about that? What happened?]
:::

## Method: Content analysis
<br>

::: {.callout-note icon=false appearance=simple}
## Did participant answer "yes" or "no"?

- If "yes", did they offer a story? 
- If "no", was an explanation provided? 
:::

## 

:::: {.container .incremental layout-ncol="2"}
:::{.fragment}
:::{.figure}

```{r}
#| fig-cap: "Overall Outcome Frequency"
#| out-width: "95%"
#| fig-align: "center"

all_rdbu_colors <- brewer.pal(9, "Set2")
# Select the 3rd and 10th colors
my_custom_colors1 <- all_rdbu_colors[c(2,1)]

dat <- df |> 
  filter(!response == "na") |> 
  count(response)

p1 <- ggplot(dat, aes(response, n,
             fill = response)) +
  geom_col(width = .5,
           color = "black",
           show.legend = F) +
  
  labs(y = NULL, x = NULL) +

  geom_text(
    aes(label = n), 
    hjust = -0.2,  
    size = 10,  # font size. Note: unit different (mm)
    family = "Georgia"
  ) +
  # make sure plot area is wide enough for new text
  scale_y_continuous(expand = expansion(mult = c(0, .15))) +
  coord_flip() +
  scale_fill_manual(values = my_custom_colors1) +
  theme_classic(base_size = 25, base_family = "Georgia") +
  theme(axis.text.y = element_text(size = 30),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank())

p1
```

:::
:::

:::{.fragment}
:::{.figure}

```{r}
#| fig-cap: "Response by Gender"
#| out-width: "95%"
#| fig-align: "center"

df_summary <- df |>
  filter(!response == "na") |>
  count(gender, response) |> # Count combinations of gender and response
  group_by(gender) |>       # Calculate percentages within each gender group
  mutate(pct = n / sum(n)) |>
  ungroup() |> 
  mutate(response = factor(response, levels = c("no", "yes")))

# 2. Now, create the plot using this summary data
ggplot(df_summary, aes(x = gender, y = n, fill = response)) +

  geom_col(position = "fill",
           color = "black", 
           width = .6,
           show.legend = F) +
           
  # --- ADD AND CUSTOMIZE THE PERCENTAGE LABELS ---
  geom_text(
    # Use the pre-calculated percentage 'pct' for the label
    aes(label = percent(pct, accuracy = 1)),
    # This is key: position the labels in the middle of each stacked segment
    position = position_fill(vjust = 0.5),
    size = 9, # Adjust size here (unit is mm)
    color = "white",
    fontface = "bold",
    family = "Georgia"
  ) +

  scale_y_continuous(labels = percent) +
  scale_fill_manual(values = my_custom_colors1) +
  labs(y = NULL, x = NULL) +
  coord_flip() +
  # guides(fill = guide_legend(reverse = TRUE)) +
  theme_classic(base_size = 25, base_family = "Georgia") +
  
  theme(
    axis.text.y = element_text(size = 28),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank()
    # Control size of the percentage axis labels "0%", "50%", etc.
    # axis.text.x = element_text(size = 20),
    # Control the legend title size
    # legend.title = element_text(size = 22),
    # Control the legend item ("yes", "no") size
    # legend.text = element_text(size = 20),
    # legend.title = element_blank(),
    # legend.position = "top"
  )

```

:::
:::

:::{.fragment}
:::{.figure}

```{r}
#| fig-cap: "Response by Hispanicity<sup>*</sup>"
#| out-width: "95%"
#| fig-align: "center"


df_summary <- df |>
  filter(!response == "na",
         race %in% c("white", "hispanic")) |> 
  count(race, response) |>  
  group_by(race) |>       
  mutate(pct = n / sum(n)) |>
  ungroup() |> 
  mutate(response = factor(response, levels = c("no", "yes")))
  
p3 <- ggplot(df_summary, aes(x = race, y = n, fill = response)) +
  geom_col(position = "fill",
           color = "black", 
           width = .6,
           show.legend = F) +
           
  geom_text(
    # Use the pre-calculated percentage 'pct' for the label
    aes(label = percent(pct, accuracy = 1)),
    # This is key: position the labels in the middle of each stacked segment
    position = position_fill(vjust = 0.5),
    size = 9, # Adjust size here (unit is mm)
    color = "white",
    fontface = "bold",
    family = "Georgia"
  ) +

  scale_y_continuous(labels = percent) +
  
  scale_fill_manual(values = my_custom_colors1) +
  labs(y = NULL, x = NULL) + 
  coord_flip() +
  # guides(fill = guide_legend(reverse = TRUE)) +
  theme_classic(base_size = 25, base_family = "Georgia") +
  
  theme(
    axis.text.y = element_text(size = 28),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    # legend.text = element_text(size = 20),
    # legend.title = element_blank(),
    # legend.position = "top",
    plot.subtitle = element_text(size = 18)
  )
  
p3
```

:::
:::

:::{.fragment}
:::{.figure}

```{r}
#| fig-cap: "Response by Rurality"
#| out-width: "95%"
#| fig-align: "center"

df_summary <- df |>
  filter(!response == "na") |>
  count(rural_urban, response) |> # Count combinations of gender and response
  group_by(rural_urban) |>       # Calculate percentages within each gender group
  mutate(pct = n / sum(n)) |>
  ungroup() |> 
  mutate(response = factor(response, levels = c("no", "yes")))

# Create the plot using summary data
ggplot(df_summary, aes(x = rural_urban, y = n, fill = response)) +

  geom_col(position = "fill",
           color = "black", 
           width = .6,
           show.legend = F) +
           
  # --- ADD AND CUSTOMIZE THE PERCENTAGE LABELS ---
  geom_text(
    # Use the pre-calculated percentage 'pct' for the label
    aes(label = percent(pct, accuracy = 1)),
    # This is key: position the labels in the middle of each stacked segment
    position = position_fill(vjust = 0.5),
    size = 9, # Adjust size here (unit is mm)
    color = "white",
    fontface = "bold",
    family = "Georgia"
  ) +

  scale_y_continuous(labels = percent) +
  scale_fill_manual(values = my_custom_colors1) +
  labs(y = NULL, x = NULL) + 
  coord_flip() +
  # guides(fill = guide_legend(reverse = TRUE)) +
  theme_classic(base_size = 25, base_family = "Georgia") +
  theme(
    axis.text.y = element_text(size = 28),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank()
    # Control size of the percentage axis labels "0%", "50%", etc.
    # axis.text.x = element_text(size = 20),
    # Control the legend title size
    # legend.title = element_text(size = 22),
    # Control the legend item ("yes", "no") size
    # legend.text = element_text(size = 20),
    # legend.title = element_blank(),
    # legend.position = "top"
  )

```

:::
:::
::::

## {.smaller}
### Response subtypes: Yes

<br><br>

```{r}
#| out-width: "95%"
#| fig-align: "center"

df |> 
  filter(response == "yes") |> 
  count(explanation_type, sort = T) |> 
  gt() |> 
  tab_style(
    style = cell_text(v_align = "top",
                      size = px(24)),
    locations = cells_body(columns = everything())
  ) |> 
  tab_style(
    style = cell_text(weight = "bold",
                      size = px(24)),
    locations = cells_column_labels()
  ) 

```



## {.smaller}

**Clip 2 | Response subtypes: Yes**


```{r}

df_clip_2 <-  import('av/Eagle_Pass_NC_06052024_1.xlsx') |> 
  filter(!is.na(Speaker)) 

df_clip_2 |> 
  gt() |> 
  tab_style(
    style = cell_text(v_align = "top",
                      size = px(18) ),
    locations = cells_body(columns = everything())
  ) |> 
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_column_labels()
  ) |> 
  tab_options(
    table.width = pct(85),
    table.margin.left = px(0)
  )

```


<audio controls>
  <source src="av/Eagle_Pass_NC_06052024_1.mp3" type="audio/mpeg">
  Your browser does not support the audio element.
</audio>



## {.smaller}

**Clip 3 | Response subtypes: Yes**

<br>

```{r}

df_clip_3 <-  import('av/Azle_HL_06252024_1.xlsx') |> 
  filter(!is.na(Speaker)) 

df_clip_3 |> 
  gt() |> 
  tab_style(
    style = cell_text(v_align = "top",
                      size = px(20) ),
    locations = cells_body(columns = everything())
  ) |> 
  tab_style(
    style = cell_text(weight = "bold",
                      size = px(21)),
    locations = cells_column_labels()
  ) |> 
  tab_options(
    table.width = pct(70),
    table.margin.left = px(0)
  )

```


<audio controls>
  <source src="av/Azle_HL_06252024_1.mp3" type="audio/mpeg">
  Your browser does not support the audio element.
</audio>

## {.smaller}
### Response subtypes: No

<br>

```{r}
#| out-width: "95%"
#| fig-align: "center"

df |> 
  filter(response == "no") |> 
  count(explanation_type, sort = T) |> 
  gt() |> 
  tab_style(
    style = cell_text(v_align = "top",
                      size = px(24)),
    locations = cells_body(columns = everything())
  ) |> 
  tab_style(
    style = cell_text(
      weight = "bold",
      size = px(24) 
    ),
    locations = cells_column_labels()
  ) |>
  tab_options(
    # table.width = pct(85),
    table.margin.left = px(2)
  )

```


## {.smaller}

**Clip 4 | Response subtypes: No**

<br>

```{r}

df_clip_4 <-  import('av/Donna_AR_07192024_1.xlsx') |> 
  filter(!is.na(Speaker)) 

df_clip_4 |> 
  gt() |> 
  tab_style(
    style = cell_text(v_align = "top",
                      size = px(21) ),
    locations = cells_body(columns = everything())
  ) |> 
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_column_labels()
  ) |> 
  tab_options(
    table.width = pct(70),
    table.margin.left = px(0)
  )

```


<audio controls>
  <source src="av/Donna_AR_07192024_1.mp3" type="audio/mpeg">
  Your browser does not support the audio element.
</audio>

## {.smaller}

**Clip 5 | Response subtypes: No**

<br>

```{r}

df_clip_5 <-  import('av/Beaumont_MM_06252024_1.xlsx') |> 
  filter(!is.na(Speaker)) 

df_clip_5 |> 
  gt() |> 
  tab_style(
    style = cell_text(v_align = "top",
                      size = px(21) ),
    locations = cells_body(columns = everything())
  ) |> 
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_column_labels()
  ) |> 
  tab_options(
    table.width = pct(70),
    table.margin.left = px(0)
  )

```


<audio controls>
  <source src="av/Beaumont_MM_06252024_1.mp3" type="audio/mpeg">
  Your browser does not support the audio element.
</audio>

## Summary {.smaller}

:::{.incremental}
- Of the "no" answers, most avoid "trouble" by offering explanations (no memory, personal values), a laugh, "No, ma'am", or similar.
- Of the "yes" answers, many failed to provide stories, offered brief jokes, or betrayed discomfort. 
- Phatic communion around CT was rarely attained. 
- If it did, the conversational object was something else, e.g. the personal values.
:::

:::{.fragment}
:::{.callout-tip appearance="simple"}
Does cultural conservatism predict a stronger rejection of the question?
:::
:::

# Conservative <br>Self-Positioning {.light-text background-image="img/cross.png" style="color: white;"}

## 

:::{.fragment}
CRINGE
  : A pop-culturally grounded concept.</br></br>
:::

:::{.fragment}
Cultural conservatism 
  : Coded on place talk segments of the interviews. Might negatively predict CT phaticity.</br></br>
:::

:::{.fragment}
Political conservatism
  : Explicit alignment with a political position.
:::

## Explicit political alignment {.smaller}

```{r}
#| out-width: "95%"
#| fig-align: "center"

my_colors <- c(
  "unclear" = "#FAF0E6",      
  "conservative" = "#DE0100", 
  "progressive" = "#3355FF",  
  "none" = "#303030"          
)

df_political <- rio::import("data_political.csv") |> 
  mutate(political_leaning = str_trim(political_leaning)
           )

plot_data <- df_political |>
  filter(!is.na(political_leaning), political_leaning != "NA", 
         political_leaning!="") |>
  count(political_leaning) |>
  mutate(political_leaning = fct_reorder(political_leaning, n),
         text_color = case_when(
           political_leaning == "unclear" ~ "black", 
           TRUE                           ~ "white"  
         )
         )

ggplot(plot_data, aes(x = political_leaning, y = n, fill = political_leaning)) +
  # Create the bars
  geom_col(show.legend = FALSE,
           width = 0.6
           ) +
  
  geom_text(
    aes(label = n, color = text_color), 
    hjust = 1.2,
    size = 8,
    family = "Georgia",
    show.legend = F
  ) +
  coord_flip() +
  scale_fill_manual(values = my_colors) +
  scale_color_identity() +
  labs(
    title = "Frequency of Political Leaning",
    x = NULL, 
    y = NULL  
  ) +
  theme_classic(base_size = 25, base_family = "Georgia") +
  theme(
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank()
    #axis.line.x = element_blank() 
  )
```

## 

:::: {.container .incremental layout-ncol="2"}
:::{.fragment}
:::{.figure}

```{r}
#| fig-cap: "Response by political leaning"
#| out-width: "95%"
#| fig-align: "center"

df |> 
  filter(response != "na") |> 
  filter(political_leaning %in% c("conservative", "progressive")) |> 
  ggplot(aes(x = response)) +
  geom_bar(aes(y = after_stat(prop), group = 1), width = .5) +
  scale_y_continuous(labels = scales::percent) +
  facet_wrap(~political_leaning) +
  labs(x = NULL, y = NULL) + 
  theme_classic(base_size = 25, base_family = "Georgia") +
  theme(
    axis.text.x = element_text(angle = 17, vjust = .7),
    axis.ticks.x = element_blank()
    #axis.line.x = element_blank()  
  )
```
:::
:::

:::{.fragment}
:::{.figure}

```{r}
#| fig-cap: "Yes-response types by political leaning"
#| out-width: "95%"
#| fig-align: "center"

df |> 
  filter(response == "yes") |> 
  filter(political_leaning %in% c("conservative", "progressive")) |> 
  ggplot(aes(x = explanation_type)) +
  geom_bar(aes(y = after_stat(prop), group = 1), width = .5) +
  scale_y_continuous(labels = scales::percent) +
  facet_wrap(~political_leaning) +
  labs(x = NULL, y = NULL) + 
  theme_classic(base_size = 25, base_family = "Georgia") +
  theme(
    axis.text.x = element_text(angle = 17, vjust = .7),
    axis.ticks.x = element_blank()
    #axis.line.x = element_blank()  
  )
```
:::
:::

:::{.fragment}
:::{.figure}

```{r}
#| fig-cap: "No-response types by political leaning"
#| out-width: "95%"
#| fig-align: "center"

df |> 
  filter(response == "no") |> 
  filter(political_leaning %in% c("conservative", "progressive")) |> 
  ggplot(aes(x = explanation_type)) +
  geom_bar(aes(y = after_stat(prop), group = 1), width = .5) +
  scale_y_continuous(labels = scales::percent) +
  facet_wrap(~political_leaning) +
  labs(x = NULL, y = NULL) + 
  theme_classic(base_size = 18, base_family = "Georgia") +
  theme(
    axis.text.x = element_text(angle = 15, vjust = .7),
    axis.ticks.x = element_blank()
    #axis.line.x = element_blank()  
  )
```
:::
:::
::::


# Conclusions {background-image="img/cowboys2.png"} 

## Conclusions

:::{.incremental}
1. CT elicitation was found to be mostly at odds with its designated purpose in the slx interview.
1. Factors like familiarity, general openness, and interviewer persona seemed more effective.
1. New HT: orientations toward conservatism, as proxies for openness, may predict the success of the CT question in the slx interview.
:::

## Methodological takeaways {.smaller}

:::{.incremental}
1. Train student interviewers more deeply in the art of follow-up questions.
1. Take into account that CT can make participants uncomfortable - it may not land.
1. Square the protocol with participants' formal perception of the interview event.
1. Focus on more PT instead of CT.
1. Test CT elicitation again in one year when we request younger participants (2026?), and combine with one or two other questions designed to elicit CT.
:::

## 

Thank you for your attention.


<br>e-mail: TxE@utexas.edu 
<br>www: https://larshinrichs.site 



